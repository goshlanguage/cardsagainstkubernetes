// Package autogenerated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package autogenerated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Card defines model for Card.
type Card struct {
	// Unique id of the card
	Id string `json:"id"`

	// Card body text
	Text *string `json:"text,omitempty"`

	// Card title
	Title *string `json:"title,omitempty"`

	// Card title alternate text, displayed after the title and in an alternate font color
	Titlealt *string `json:"titlealt,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// Game defines model for Game.
type Game struct {
	AdlibDeck *[]Card `json:"adlibDeck,omitempty"`

	// 4 character unique string for the game
	Id                *string   `json:"id,omitempty"`
	Players           *[]Player `json:"players,omitempty"`
	PromptDeck        *[]Card   `json:"promptDeck,omitempty"`
	PromptSubmissions *[]Card   `json:"promptSubmissions,omitempty"`

	// Number of rounds the game has progressed
	Rounds *float32 `json:"rounds,omitempty"`
}

// NewCard defines model for NewCard.
type NewCard struct {
	// Unique id of the card
	Id *string `json:"id,omitempty"`

	// Card body text
	Text *string `json:"text,omitempty"`

	// Card title
	Title *string `json:"title,omitempty"`

	// Card title alternate text, displayed after the title and in an alternate font color
	Titlealt *string `json:"titlealt,omitempty"`
}

// NewGame defines model for NewGame.
type NewGame struct {
	AdlibDeck *[]Card `json:"adlibDeck,omitempty"`

	// 4 character unique string for the game
	Id                *string   `json:"id,omitempty"`
	Players           *[]Player `json:"players,omitempty"`
	PromptDeck        *[]Card   `json:"promptDeck,omitempty"`
	PromptSubmissions *[]Card   `json:"promptSubmissions,omitempty"`

	// Number of rounds the game has progressed
	Rounds *float32 `json:"rounds,omitempty"`
}

// NewPlayer defines model for NewPlayer.
type NewPlayer struct {
	Hand *[]Card `json:"hand,omitempty"`

	// icon to display for the user
	Icon *string `json:"icon,omitempty"`

	// Unique id of the player
	Id *string `json:"id,omitempty"`

	// Name of the player
	Name string `json:"name"`

	// user's current score
	Score *float32 `json:"score,omitempty"`
}

// Player defines model for Player.
type Player struct {
	Hand *[]Card `json:"hand,omitempty"`

	// icon to display for the user
	Icon *string `json:"icon,omitempty"`

	// Unique id of the player
	Id string `json:"id"`

	// Name of the player
	Name string `json:"name"`

	// user's current score
	Score *float32 `json:"score,omitempty"`
}

// FindGamesParams defines parameters for FindGames.
type FindGamesParams struct {
	// tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddGameJSONBody defines parameters for AddGame.
type AddGameJSONBody = NewGame

// AddGameJSONRequestBody defines body for AddGame for application/json ContentType.
type AddGameJSONRequestBody = AddGameJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FindGames request
	FindGames(ctx context.Context, params *FindGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGame request with any body
	AddGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddGame(ctx context.Context, body AddGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGame request
	DeleteGame(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindGameByID request
	FindGameByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FindGames(ctx context.Context, params *FindGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindGamesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGame(ctx context.Context, body AddGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGame(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindGameByID(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindGameByIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFindGamesRequest generates requests for FindGames
func NewFindGamesRequest(server string, params *FindGamesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddGameRequest calls the generic AddGame builder with application/json body
func NewAddGameRequest(server string, body AddGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddGameRequestWithBody(server, "application/json", bodyReader)
}

// NewAddGameRequestWithBody generates requests for AddGame with any type of body
func NewAddGameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGameRequest generates requests for DeleteGame
func NewDeleteGameRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindGameByIDRequest generates requests for FindGameByID
func NewFindGameByIDRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FindGames request
	FindGamesWithResponse(ctx context.Context, params *FindGamesParams, reqEditors ...RequestEditorFn) (*FindGamesResponse, error)

	// AddGame request with any body
	AddGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGameResponse, error)

	AddGameWithResponse(ctx context.Context, body AddGameJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGameResponse, error)

	// DeleteGame request
	DeleteGameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGameResponse, error)

	// FindGameByID request
	FindGameByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FindGameByIDResponse, error)
}

type FindGamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Game
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r FindGamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindGamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Game
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AddGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindGameByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Game
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r FindGameByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindGameByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FindGamesWithResponse request returning *FindGamesResponse
func (c *ClientWithResponses) FindGamesWithResponse(ctx context.Context, params *FindGamesParams, reqEditors ...RequestEditorFn) (*FindGamesResponse, error) {
	rsp, err := c.FindGames(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindGamesResponse(rsp)
}

// AddGameWithBodyWithResponse request with arbitrary body returning *AddGameResponse
func (c *ClientWithResponses) AddGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddGameResponse, error) {
	rsp, err := c.AddGameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGameResponse(rsp)
}

func (c *ClientWithResponses) AddGameWithResponse(ctx context.Context, body AddGameJSONRequestBody, reqEditors ...RequestEditorFn) (*AddGameResponse, error) {
	rsp, err := c.AddGame(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGameResponse(rsp)
}

// DeleteGameWithResponse request returning *DeleteGameResponse
func (c *ClientWithResponses) DeleteGameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGameResponse, error) {
	rsp, err := c.DeleteGame(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameResponse(rsp)
}

// FindGameByIDWithResponse request returning *FindGameByIDResponse
func (c *ClientWithResponses) FindGameByIDWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FindGameByIDResponse, error) {
	rsp, err := c.FindGameByID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindGameByIDResponse(rsp)
}

// ParseFindGamesResponse parses an HTTP response from a FindGamesWithResponse call
func ParseFindGamesResponse(rsp *http.Response) (*FindGamesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindGamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Game
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddGameResponse parses an HTTP response from a AddGameWithResponse call
func ParseAddGameResponse(rsp *http.Response) (*AddGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Game
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGameResponse parses an HTTP response from a DeleteGameWithResponse call
func ParseDeleteGameResponse(rsp *http.Response) (*DeleteGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFindGameByIDResponse parses an HTTP response from a FindGameByIDWithResponse call
func ParseFindGameByIDResponse(rsp *http.Response) (*FindGameByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindGameByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Game
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all games
	// (GET /games/)
	FindGames(c *gin.Context, params FindGamesParams)
	// Creates a new game
	// (POST /games/)
	AddGame(c *gin.Context)
	// Deletes a game by ID
	// (DELETE /games/{id})
	DeleteGame(c *gin.Context, id string)
	// Returns a game by ID
	// (GET /games/{id})
	FindGameByID(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// FindGames operation middleware
func (siw *ServerInterfaceWrapper) FindGames(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindGamesParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := c.Query("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tags: %s", err)})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FindGames(c, params)
}

// AddGame operation middleware
func (siw *ServerInterfaceWrapper) AddGame(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddGame(c)
}

// DeleteGame operation middleware
func (siw *ServerInterfaceWrapper) DeleteGame(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteGame(c, id)
}

// FindGameByID operation middleware
func (siw *ServerInterfaceWrapper) FindGameByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FindGameByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/games/", wrapper.FindGames)

	router.POST(options.BaseURL+"/games/", wrapper.AddGame)

	router.DELETE(options.BaseURL+"/games/:id", wrapper.DeleteGame)

	router.GET(options.BaseURL+"/games/:id", wrapper.FindGameByID)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWUW/bNhD+KwQ3YC+a5aZ90ltad4OxoStW7KnLw1k6WWwlUuGdkhiB/vvAo2zHluyk",
	"SwZs2FNikUd+930fP/Je565pnUXLpLN7TXmFDci/78AX4S/U9W+lzj7f6+89ljrT36X7mnQoSD/grRT0",
	"yb1uvWvRs0FZx8gqBVLuTcvGWZ3pP6y57lCZQrlScYUqD7WJ5k2LOtPE3ti17vtEe7zujMdCZ5/DSlf9",
	"VZ/o9947H1Y93Cl3BY73kslKxhJdOt8A60wby68v9jsay7hGr/tEN0gE65MLbYcfAztsuJ0eYP8MDX4T",
	"o1IgHW/pzV6Q3UQz3vG4PGykVq7YKBmfqjNc44nCOHaqCGo+V6egZvQWGGXvRBWG2ho2WCgoGb10M8y0",
	"hTJWgX1QUzrLKne184/KYwO1A7NbXQ6ZhaI2qwXmX4Vmxka+nlNsOADbncF72ITfUxq9UXkFHvLQVBf1",
	"ikhV6WKb64Bqgkfhw9OTUX2U+VO4Wu+all+kxbjUp27VGCLjLD17Re86W9CYuA9ds0IfnB1n7LhSFZBq",
	"vVt7JMIHfrdSofs+qj3wMdK7Als8X+o8gDzGHL4qdls37yTuCP2UxE861NEHU+V28PMRcYGjR2spd36i",
	"OCD9gVTeeY+WVZw1ZvjEGdtT/uTo27n2bwXeqf6mL5Tw2djSjRe+VGSatkZ1+XGpuAJWhoJqRVCT2Plo",
	"PWLgQEdtcrQk9EUN9GULeYXqYjbXie58rTNdMbeUpent7e0MZHjm/Dodain9dfnu/YdP73+8mM1nFTf1",
	"g8CVpCR1uQZjidUv3Qq9RUYK+HSib9BTBD6fzWevQqVr0UJrdKZfz+aCogWuhMlUoKfh3zVOxPLvyJ23",
	"pKCuY5eq9K4RfmlDjE1kZGtkOX+Q50ik2P1ptWzuIay2LHSmfzK2CFFLAsJDgyw59vl4Y4Z1WEKVJiS7",
	"Wm100Edn+rpDH34M5IZ5OhneLAdHd3z5HJ1T4o0QGt4DYrJDBA3cmaZrlN2HDVJXs8DywssJTLVpDB+A",
	"evTJ0V8FV1Lrgvyh4mI+j88Zy2hFGGjb2uRCZfqFYsRMtH3uTMW3xDETwfqHrUuUbuFoGS6hi9f2kxGd",
	"AxIfbxM7dxbvWswZC4XDnERT1zTgN1N2lHvH0dSDwiOEUwHK4m28HIyNxg1ndjay5mUhztQxHpD4rSs2",
	"L9bx7iU37jl8D56CQiJlB1E/DCr2HfbP9Mjj1vgPWWGsr0wYAu3eFH30RI08cZfF76GajF3Xw+thBSHW",
	"XbTJcqGoC23JO+LQKwspH+xyNseWi5Ac60HiAc4QGyGF96lhipHgDyPk+BYbB8abcZuyb9y0+DeJt9jR",
	"H3nfqOUi4Dt/Bx2JtNNuuTh5z7zdyOA3SFQi59U/pND/+LgeixgVlznob7bCHL6OcvgKrZlV4PkLzoxL",
	"oTXpzasU6raCV6nc2fuKLE1rl0NdOeLs9Xw+H02/6v8KAAD//4TUNk/rEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
